---
const items = [
  { name: "Home", href: "#hero" },
  { name: "Sobre Nosotros", href: "#about" },
  { name: "Nuestros Productos", href: "#products" },
  { name: "Por QuÃ© Elegirnos", href: "#why-choose-us" },
  { name: "Testimonios", href: "#testimonials" },
  { name: "Contacto", href: "#contact" },
];
---

<nav class="fixed top-0 right-0 left-0 z-50 transition-colors duration-300" id="main-navigation">
  <div
    id="navbar-bg"
    class="absolute inset-0 bg-background dark:bg-background-dark transition-all duration-300 z-10"
  >
  </div>

  <div
    class="flex items-center justify-between px-8 md:px-7 py-6 mx-auto z-20 relative"
  >
    <a
      href="/"
      class="text-2xl md:text-3xl font-bold text-primary dark:text-primary font-primary"
    >
      ðŸ¥­ Mangoland
    </a>

    <ul
      class="hidden md:flex gap-6 text-text dark:text-text-dark font-secondary"
      id="desktop-menu"
    >
      {
        items.map((item) => (
          <li>
            <a
              href={item.href}
              class="hover:text-primary dark:hover:text-primary transition active:text-primary"
              data-nav-link
            >
              {item.name}
            </a>
          </li>
        ))
      }
    </ul>

    <div class="flex gap-4 items-center">
      <button
        id="theme-toggle"
        class="text-primary dark:text-primary text-xl"
        aria-label="Toggle Dark Mode"
      >
        ðŸŒž
      </button>

      <button
        id="menu-button"
        class="md:hidden text-primary dark:text-primary text-2xl"
        aria-label="Abrir menÃº"
      >
        â˜°
      </button>
    </div>
  </div>

  <ul
    id="mobile-menu"
    class="hidden absolute top-full left-0 w-full h-screen bg-surface dark:bg-surface-dark shadow-lg py-6 flex flex-col gap-6 text-center text-text dark:text-text-dark font-secondary transition-colors duration-300 md:hidden z-[60]"
  >
    {
      items.map((item) => (
        <li>
          <a
            href={item.href}
            class="hover:text-primary dark:hover:text-primary transition"
            data-nav-link
          >
            {item.name}
          </a>
        </li>
      ))
    }
  </ul>
</nav>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const navbar = document.getElementById("main-navigation");
    const navbarBg = document.getElementById("navbar-bg");
    const menuButton = document.getElementById("menu-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const themeToggle = document.getElementById("theme-toggle");
    const html = document.documentElement;
    const navLinks = document.querySelectorAll("[data-nav-link]");
    const sections = document.querySelectorAll("article[id]"); // AsegÃºrate de que tus secciones tengan un ID

    // FunciÃ³n para hacer scroll suave
    const scrollToSection = (href) => {
      const targetElement = document.querySelector(href);
      if (targetElement) {
        window.scrollTo({
          top: targetElement.offsetTop - navbar.offsetHeight, // Ajusta si tienes un margen superior
          behavior: "smooth",
        });
      }
    };

    // Toggle del menÃº mobile
    if (menuButton && mobileMenu) {
      menuButton.addEventListener("click", () => {
        mobileMenu.classList.toggle("hidden");
        mobileMenu.classList.toggle("flex");
        menuButton.textContent = mobileMenu.classList.contains("flex") ? "âœ–" : "â˜°";
      });

      // Cerrar menÃº mobile al hacer click en un link
      mobileMenu.querySelectorAll("a").forEach((link) => {
        link.addEventListener("click", () => {
          mobileMenu.classList.remove("flex");
          mobileMenu.classList.add("hidden");
          menuButton.textContent = "â˜°";
        });
      });
    }

    // Scroll suave al hacer clic en los enlaces del menÃº de escritorio
    document.querySelectorAll("#desktop-menu a").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");
        scrollToSection(href);
      });
    });

    // Scroll suave al hacer clic en los enlaces del menÃº mÃ³vil
    document.querySelectorAll("#mobile-menu a").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const href = link.getAttribute("href");
        scrollToSection(href);
      });
    });

    // Toggle de tema (Claro/Oscuro)
    if (themeToggle && html) {
      const savedTheme = localStorage.getItem("theme");
      if (savedTheme) {
        html.className = savedTheme;
        themeToggle.textContent = savedTheme === "dark" ? "ðŸŒ™" : "ðŸŒž";
      }

      themeToggle.addEventListener("click", () => {
        html.classList.toggle("dark");
        html.classList.toggle("light");
        const newTheme = html.classList.contains("dark") ? "dark" : "light";
        localStorage.setItem("theme", newTheme);
        themeToggle.textContent = newTheme === "dark" ? "ðŸŒ™" : "ðŸŒž";
      });
    }

    // Agregar sombra al navbar al hacer scroll
    if (navbarBg) {
      window.addEventListener("scroll", () => {
        if (window.scrollY > 50) {
          navbarBg.classList.remove("bg-background", "dark:bg-background-dark");
          navbarBg.classList.add("bg-surface", "dark:bg-surface-dark", "shadow-lg");
        } else {
          navbarBg.classList.remove("bg-surface", "dark:bg-surface-dark", "shadow-lg");
          navbarBg.classList.add("bg-background", "dark:bg-background-dark");
        }
      });
    }

    // Observador de la IntersecciÃ³n para resaltar la secciÃ³n activa
    if (sections.length > 0 && navLinks.length > 0 && navbar) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const id = entry.target.getAttribute("id");
              navLinks.forEach((link) => {
                link.classList.remove("active");
                if (link.getAttribute("href") === `#${id}`) {
                  link.classList.add("active");
                }
              });
            }
          });
        },
        {
          rootMargin: `-${navbar.offsetHeight}px 0px 0px 0px`,
          threshold: 0.5,
        }
      );

      sections.forEach((section) => {
        observer.observe(section);
      });
    }
  });
</script>